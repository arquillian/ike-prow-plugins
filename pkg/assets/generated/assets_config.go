// Code generated by go-bindata.
// sources:
// config/test-keeper.yaml
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testKeeperYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xcd\x6e\xdb\x3c\x10\xbc\xe7\x29\x04\x7c\x1f\xe0\xd6\x45\x98\x7b\x2f\x01\xea\x18\x81\x83\x36\x29\x6a\x17\x3d\x34\x85\xc1\x90\x6b\x99\x16\xc5\x55\xb9\xb4\x22\x21\xc8\xbb\x17\x94\x29\x92\x8a\x73\xdb\x99\x1d\xee\xec\x8f\xe4\x80\xdc\xb6\xe1\xce\x81\x35\xf4\xf9\xa2\x28\xfe\x2b\xee\x78\xcb\x2f\x8a\xe2\xb2\x98\x6d\x80\xdc\x9c\x1d\x78\xcb\x67\x27\x62\xee\x99\x33\x82\xce\x98\x05\x27\x98\x90\xab\x4d\x80\x83\xc3\x2d\x06\x7a\xeb\xed\x59\x89\x81\xf7\xce\x6b\x61\x55\xe3\x42\x7e\x48\x1f\x68\xac\x42\x0d\x88\x01\x0e\xea\x4d\xdf\xc0\xb9\xda\x45\x75\x80\xdd\xe4\xb5\xa3\x37\xb0\x0b\xd5\xbe\xf7\x6e\x8f\xe6\x94\x73\xc3\xdc\x4d\x3f\xb6\x6b\x11\xdb\x3e\x5f\x49\x39\x30\x93\xa5\x9c\x53\xf4\x0e\x37\x2c\x66\x4a\xaf\x36\x91\xb8\xa0\x4a\x35\xdb\x96\x6b\x25\xb9\x53\x68\xb6\x3b\xb4\xa7\x9b\x7c\x39\x2a\x2d\x0b\x87\xa8\xa9\xd8\x29\x0d\x74\x7a\x5c\x6a\x25\x81\xf5\xbc\xd6\xb3\x9c\xd0\x28\xaa\x40\x34\x58\xb3\x2e\xa6\xeb\xd6\x3c\x67\x21\x13\xb5\xcc\xe1\x13\x77\xe3\x33\x2e\x2a\x5e\x02\x3b\x10\x9a\x40\x3d\xf9\x16\x58\x69\xb9\xd4\x30\xba\x0d\xe0\x79\x8a\xb2\x2a\xdf\x78\x05\xbe\xdb\x51\x70\xd4\x8d\x87\xe9\xa2\xb7\x50\xe7\xf9\x09\xb2\xf0\xf7\xa8\x2c\xd4\x60\x1c\x31\x65\xde\x63\x5d\x37\x3a\x49\x14\x15\xd8\x4b\x81\x75\x83\x04\xac\x8f\x13\xdf\x0c\x09\x5f\x76\x1e\xae\x99\xaf\x52\x2a\x0b\xc2\xa1\x55\x71\xa1\xc3\x0c\x57\xe1\x71\x0b\x46\xa2\x1d\x11\xab\x5b\x33\xc6\x06\x25\x6c\x6b\x94\x47\x0d\x74\x15\x0a\x2f\x56\xa7\xaa\x41\xed\x2c\x6f\x15\x65\xad\xdc\x81\xa9\x94\xa1\x6c\x44\x56\x2a\xa7\xf9\xd3\xa5\x50\x99\xec\x19\xac\x6f\x39\x63\x84\xb2\x42\x87\xa1\x06\xa7\x9f\xab\x82\x13\x81\x0b\x56\x73\x76\x68\xca\x59\x8a\x21\x81\xc6\xa4\x58\x09\x8c\x31\xb5\x89\x2f\xd5\x2e\xc6\x82\x28\x69\x26\x80\x67\x40\x43\x04\x16\x4a\xe8\x5e\x5e\xd8\xfc\x91\xfd\xee\x48\xfe\xb9\xde\xbb\x5a\xff\xff\xfa\x1a\xb5\x90\xfe\x57\xe8\xdc\x9b\xbe\xe3\xe7\x37\xcf\x6e\x39\x67\x9c\x84\x52\x12\x45\x22\x12\xf8\xba\x5a\x2c\xef\xd7\xcb\x80\x16\x0f\x37\xcb\x87\x5f\xf7\xcb\x1f\xeb\xf1\x08\x68\x76\xaa\x0c\x06\x15\xb7\x35\x67\x02\xcd\x2e\x7d\x72\xa1\xe1\xc6\xa2\xb3\xdc\xdf\xde\xb7\xee\x25\x1f\x54\xf9\xf1\xfa\x91\x1d\x28\x75\x1f\xb4\x8f\x8c\x7d\x52\xa5\x41\x0b\x31\xc3\x40\x2a\x87\x56\x0c\x6e\xe7\x6a\x2b\xde\xd6\x70\x74\xd2\x7a\x37\xff\x53\x25\x93\xf7\x9a\x64\x02\x25\x08\x6c\xb3\x8f\xa0\xe9\xb5\x32\x8e\xd9\xb4\x94\xd2\x1f\x7d\x18\x7a\xbd\x07\xad\xe3\xa5\xf6\x51\xe1\xff\xc4\x7f\x01\x00\x00\xff\xff\xaa\xfc\xc3\xcf\xe1\x05\x00\x00")

func testKeeperYamlBytes() ([]byte, error) {
	return bindataRead(
		_testKeeperYaml,
		"test-keeper.yaml",
	)
}

func testKeeperYaml() (*asset, error) {
	bytes, err := testKeeperYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test-keeper.yaml", size: 1505, mode: os.FileMode(436), modTime: time.Unix(1522157001, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test-keeper.yaml": testKeeperYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"test-keeper.yaml": &bintree{testKeeperYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
